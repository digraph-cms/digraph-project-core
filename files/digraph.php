<?php
# digraph/core/digraph.php

# SITE OWNERS: DO NOT EDIT THIS FILE
# It is managed by digraph-project-core and Composer
# Its contents will be overwritten on composer install/update

# almost all autoloading is handled by Composer
require $SITE_PATH.'/digraph/vendor/autoload.php';

# set up new config file to get started
$config = new \Flatrr\Config\Config();

# load project default config
$config->readFile($SITE_PATH.'/digraph/core/digraph.yaml');

# load site config, overwriting anything else set
$config->readFile($SITE_PATH.'/digraph.yaml', null, true);

# load env config, overwriting anything else set
if (file_exists($SITE_PATH.'/env.yaml')) {
    $config->readFile($SITE_PATH.'/env.yaml', null, true);
}

# set site path
$config['paths.site'] = $SITE_PATH;

# set cache apth to system temp as a fallback
if (!$config['paths.cache'] || !is_writeable($config['paths.cache'])) {
    $config['paths.cache'] = sys_get_temp_dir().'/digraph-cache';
}

# set up CMS using Bootstrapper
# everything the bootstrapper does can be done manually, but
# in most cases it's better to use it
$cms = \Digraph\Bootstrapper::bootstrap($config);

# set up new request/response package
# it's advisable to use the Bootstrapper url() method for
# getting your query string
$package = new Digraph\Mungers\Package([
    'request.url' => \Digraph\Bootstrapper::url()
]);

# calling CMS::fullMunge() will apply the mungers specified
# in the "fullmunge" config
# by default this means building a response and also rendering it
$cms->fullMunge($package);
